"""
🚀 TERMUX TELEGRAM BOT - Modular Architecture  
📱 Bot khusus untuk Android Termux dengan arsitektur modular
🎯 Clean code structure untuk maintainability yang lebih baik
"""

import os
import sys
import logging
from pathlib import Path

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

try:
    import telegram
    TELEGRAM_AVAILABLE = True
    logger.info("✅ Telegram library available")
except ImportError:
    TELEGRAM_AVAILABLE = False
    logger.error("❌ Telegram library not available")
    print("📦 Install: pip install python-telegram-bot")

# Import the new modular bot orchestrator
from .bot_orchestrator import create_bot

# Project paths untuk Termux
PROJECT_ROOT = Path(__file__).parent.parent.parent
TERMUX_HOME = Path("/data/data/com.termux/files/home")
STORAGE_PATH = TERMUX_HOME / "storage" / "shared"


class TermuxTelegramBot:
    """🤖 Termux Telegram Bot with modular architecture"""
    
    def __init__(self):
        self.bot = None
        self.token = None
        self.is_setup_mode = False
        
        logger.info("🤖 Termux Telegram Bot initialized with modular structure")
    
    async def auto_start(self):
        """🚀 Auto start dengan deteksi setup untuk Termux"""
        logger.info("📱 Starting modular Termux bot...")
        
        env_file = PROJECT_ROOT / ".env"
        
        if not env_file.exists() or not self._is_setup_complete():
            logger.info("🛠️ Setup required...")
            await self._run_termux_setup()
        else:
            logger.info("✅ Setup complete, starting modular bot...")
            await self._run_termux_bot()
    
    def _is_setup_complete(self) -> bool:
        """✅ Check setup status"""
        try:
            env_file = PROJECT_ROOT / ".env"
            if not env_file.exists():
                return False
            
            with open(env_file, 'r') as f:
                content = f.read()
            
            has_token = 'TELEGRAM_BOT_TOKEN=' in content and 'your_bot_token' not in content.lower()
            has_user_id = 'ALLOWED_USER_IDS=' in content and 'your_user_id' not in content.lower()
            
            return has_token and has_user_id
        except:
            return False
    
    async def _run_termux_setup(self):
        """🛠️ Interactive setup untuk Termux"""
        print("\n" + "="*50)
        print("🤖 TERMUX BACKUP SYSTEM - MODULAR SETUP")
        print("📱 Setup khusus untuk Android Termux")
        print("🎯 Menggunakan arsitektur modular yang baru")
        print("="*50)
        
        # Step 1: Bot Token
        print("\n📋 STEP 1: Telegram Bot Setup")
        print("1. Buka Telegram, cari @BotFather")
        print("2. Kirim: /newbot")
        print("3. Ikuti instruksi buat bot")
        print("4. Copy token yang diberikan")
        
        while True:
            token = input("\n🔑 Paste Bot Token: ").strip()
            if token and len(token) > 40:
                self.token = token
                break
            print("❌ Token tidak valid. Coba lagi.")
        
        # Step 2: User ID
        print("\n📋 STEP 2: User ID Setup")
        print("1. Buka Telegram, cari @userinfobot")
        print("2. Kirim: /start")
        print("3. Copy ID yang diberikan")
        
        while True:
            user_id = input("\n👤 Paste User ID: ").strip()
            if user_id.isdigit() and len(user_id) > 5:
                break
            print("❌ User ID tidak valid. Coba lagi.")
        
        # Step 3: Save configuration
        await self._save_config(self.token, user_id)
        
        print("\n✅ Setup selesai!")
        print("🚀 Starting modular bot...")
        await self._run_termux_bot()
    
    async def _save_config(self, token: str, user_id: str):
        """💾 Save configuration to .env file"""
        env_content = f"""# TERMUX TELEGRAM BOT - MODULAR CONFIG
# Configuration for Android Termux environment
# Auto-generated by modular setup

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN={token}
ALLOWED_USER_IDS={user_id}

# Termux Paths
TERMUX_HOME=/data/data/com.termux/files/home
STORAGE_PATH=/data/data/com.termux/files/home/storage/shared

# Feature Flags (Modular Architecture)
ENABLE_GOOGLE_DRIVE=true
ENABLE_AUTO_DELETE=false
ENABLE_NOTIFICATIONS=true
ENABLE_DEBUG=false

# Performance Settings
MAX_CONCURRENT_UPLOADS=3
CHUNK_SIZE_MB=8
RETRY_ATTEMPTS=3
TIMEOUT_SECONDS=30

# Security Settings
ENCRYPTION_ENABLED=true
AUTO_LOCK_HOURS=1
AUDIT_LOGGING=true
"""
        
        env_file = PROJECT_ROOT / ".env"
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        logger.info("Configuration saved with modular settings")
    
    async def _run_termux_bot(self):
        """🚀 Run the modular bot"""
        try:
            # Load token from environment
            if not self.token:
                env_file = PROJECT_ROOT / ".env"
                with open(env_file, 'r') as f:
                    for line in f:
                        if line.startswith('TELEGRAM_BOT_TOKEN='):
                            self.token = line.split('=', 1)[1].strip()
                            break
            
            if not self.token:
                raise ValueError("No bot token found")
            
            # Create modular bot using orchestrator
            logger.info("🎯 Creating modular bot with orchestrator...")
            self.bot = create_bot(self.token)
            
            # Run the bot
            logger.info("🚀 Starting modular Termux Telegram Bot...")
            logger.info("📱 All handlers loaded from modular structure")
            logger.info("✅ Ready for Android backup operations!")
            
            self.bot.run()
            
        except Exception as e:
            logger.error(f"❌ Error starting modular bot: {e}")
            print(f"\n❌ Error: {e}")
            print("🔧 Check your configuration and try again")
    
    def run_sync(self):
        """🔄 Synchronous run method"""
        try:
            # Run setup check first
            self._run_setup_check()
            
            # Then run bot directly without asyncio.run()
            self._run_bot_sync()
            
        except Exception as e:
            logger.error(f"❌ Error in run_sync: {e}")
            print(f"\n❌ Error: {e}")
            print("🔧 Check your configuration and try again")
    
    def _run_setup_check(self):
        """Check if setup is needed"""
        logger.info("📱 Starting modular Termux bot...")
        
        env_file = PROJECT_ROOT / ".env"
        
        if not env_file.exists() or not self._is_setup_complete():
            logger.info("🛠️ Setup required...")
            self._run_termux_setup_sync()
        else:
            logger.info("✅ Setup complete, starting modular bot...")
    
    def _run_termux_setup_sync(self):
        """🛠️ Interactive setup untuk Termux (sync version)"""
        print("\n" + "="*50)
        print("🤖 TERMUX BACKUP SYSTEM - MODULAR SETUP")
        print("📱 Setup khusus untuk Android Termux")
        print("🎯 Menggunakan arsitektur modular yang baru")
        print("="*50)
        
        print("\n❌ Bot belum dikonfigurasi!")
        print("💡 Jalankan script setup terlebih dahulu:")
        print("   ./quick_start.sh")
        print("   atau")
        print("   python setup_config.py")
        print("\n" + "="*50)
    
    def _run_bot_sync(self):
        """🚀 Run the modular bot (sync version)"""
        try:
            # Load token from environment
            if not self.token:
                env_file = PROJECT_ROOT / ".env"
                with open(env_file, 'r') as f:
                    for line in f:
                        if line.startswith('TELEGRAM_BOT_TOKEN='):
                            self.token = line.split('=', 1)[1].strip()
                            break
            
            if not self.token:
                raise ValueError("No bot token found")
            
            # Create modular bot using orchestrator
            logger.info("🎯 Creating modular bot with orchestrator...")
            self.bot = create_bot(self.token)
            
            # Run the bot
            logger.info("🚀 Starting modular Termux Telegram Bot...")
            logger.info("📱 All handlers loaded from modular structure")
            logger.info("✅ Ready for Android backup operations!")
            
            # Call the run method on TermuxTelegramBot object
            self.bot.run()
            
        except Exception as e:
            logger.error(f"❌ Error starting modular bot: {e}")
            print(f"\n❌ Error: {e}")
            print("🔧 Check your configuration and try again")


def main():
    """🎯 Main entry point for Termux environment"""
    logger.info("🚀 Starting Termux Telegram Bot with modular architecture...")
    
    # Check if running in Termux
    is_termux = os.path.exists("/data/data/com.termux")
    if is_termux:
        logger.info("📱 Termux environment detected")
    else:
        logger.info("💻 Non-Termux environment detected")
    
    # Create and run bot
    bot = TermuxTelegramBot()
    bot.run_sync()


if __name__ == "__main__":
    main()
